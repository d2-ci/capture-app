{"version":3,"sources":["../static/js/6.5030ee8a.chunk.js","../node_modules/date-fns/locale/sk/build_distance_in_words_locale/index.js","../node_modules/date-fns/locale/sk/build_format_locale/index.js","../node_modules/date-fns/locale/sk/index.js"],"names":["webpackJsonp","406","module","exports","declensionGroup","scheme","count","one","twoFour","other","declension","time","group","replace","extractPreposition","token","filter","preposition","match","RegExp","prefixPreposition","translation","length","suffixPreposition","lowercaseFirstLetter","string","charAt","toLowerCase","slice","buildDistanceInWordsLocale","localize","options","key","substring","distanceInWordsLocale","addSuffix","comparison","xSeconds","regular","past","future","halfAMinute","xMinutes","xHours","xDays","xMonths","xYears","407","__webpack_require__","buildFormatLocale","months3char","monthsFull","weekdays2char","weekdays3char","weekdaysFull","meridiemUppercase","meridiemLowercase","meridiemFull","formatters","MMM","date","getMonth","MMMM","dd","getDay","ddd","dddd","A","getHours","a","aa","forEach","formatterToken","ordinal","formattingTokensRegExp","buildFormattingTokensRegExp","number","446","distanceInWords","format"],"mappings":"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","file":"static/js/6.5030ee8a.chunk.js","sourcesContent":["webpackJsonp([6,45,46],{\n\n/***/ 406:\n/***/ (function(module, exports) {\n\nfunction declensionGroup (scheme, count) {\n  if (count === 1) {\n    return scheme.one\n  }\n\n  if (count >= 2 && count <= 4) {\n    return scheme.twoFour\n  }\n\n  // if count === null || count === 0 || count >= 5\n  return scheme.other\n}\n\nfunction declension (scheme, count, time) {\n  var group = declensionGroup(scheme, count)\n  var finalText = group[time] || group\n  return finalText.replace('{{count}}', count)\n}\n\nfunction extractPreposition (token) {\n  var result = ['lessThan', 'about', 'over', 'almost'].filter(function (preposition) {\n    return !!token.match(new RegExp('^' + preposition))\n  })\n\n  return result[0]\n}\n\nfunction prefixPreposition (preposition) {\n  var translation = ''\n\n  if (preposition === 'almost') {\n    translation = 'takmer'\n  }\n\n  if (preposition === 'about') {\n    translation = 'približne'\n  }\n\n  return translation.length > 0 ? translation + ' ' : ''\n}\n\nfunction suffixPreposition (preposition) {\n  var translation = ''\n\n  if (preposition === 'lessThan') {\n    translation = 'menej než'\n  }\n\n  if (preposition === 'over') {\n    translation = 'viac než'\n  }\n\n  return translation.length > 0 ? translation + ' ' : ''\n}\n\nfunction lowercaseFirstLetter (string) {\n  return string.charAt(0).toLowerCase() + string.slice(1)\n}\n\nfunction buildDistanceInWordsLocale () {\n  var distanceInWordsLocale = {\n    xSeconds: {\n      one: {\n        regular: 'sekunda',\n        past: 'sekundou',\n        future: 'sekundu'\n      },\n      twoFour: {\n        regular: '{{count}} sekundy',\n        past: '{{count}} sekundami',\n        future: '{{count}} sekundy'\n      },\n      other: {\n        regular: '{{count}} sekúnd',\n        past: '{{count}} sekundami',\n        future: '{{count}} sekúnd'\n      }\n    },\n\n    halfAMinute: {\n      other: {\n        regular: 'pol minúty',\n        past: 'pol minútou',\n        future: 'pol minúty'\n      }\n    },\n\n    xMinutes: {\n      one: {\n        regular: 'minúta',\n        past: 'minútou',\n        future: 'minútu'\n      },\n      twoFour: {\n        regular: '{{count}} minúty',\n        past: '{{count}} minútami',\n        future: '{{count}} minúty'\n      },\n      other: {\n        regular: '{{count}} minút',\n        past: '{{count}} minútami',\n        future: '{{count}} minút'\n      }\n    },\n\n    xHours: {\n      one: {\n        regular: 'hodina',\n        past: 'hodinou',\n        future: 'hodinu'\n      },\n      twoFour: {\n        regular: '{{count}} hodiny',\n        past: '{{count}} hodinami',\n        future: '{{count}} hodiny'\n      },\n      other: {\n        regular: '{{count}} hodín',\n        past: '{{count}} hodinami',\n        future: '{{count}} hodín'\n      }\n    },\n\n    xDays: {\n      one: {\n        regular: 'deň',\n        past: 'dňom',\n        future: 'deň'\n      },\n      twoFour: {\n        regular: '{{count}} dni',\n        past: '{{count}} dňami',\n        future: '{{count}} dni'\n      },\n      other: {\n        regular: '{{count}} dní',\n        past: '{{count}} dňami',\n        future: '{{count}} dní'\n      }\n    },\n\n    xMonths: {\n      one: {\n        regular: 'mesiac',\n        past: 'mesiacom',\n        future: 'mesiac'\n      },\n      twoFour: {\n        regular: '{{count}} mesiace',\n        past: '{{count}} mesiacmi',\n        future: '{{count}} mesiace'\n      },\n      other: {\n        regular: '{{count}} mesiacov',\n        past: '{{count}} mesiacmi',\n        future: '{{count}} mesiacov'\n      }\n    },\n\n    xYears: {\n      one: {\n        regular: 'rok',\n        past: 'rokom',\n        future: 'rok'\n      },\n      twoFour: {\n        regular: '{{count}} roky',\n        past: '{{count}} rokmi',\n        future: '{{count}} roky'\n      },\n      other: {\n        regular: '{{count}} rokov',\n        past: '{{count}} rokmi',\n        future: '{{count}} rokov'\n      }\n    }\n  }\n\n  function localize (token, count, options) {\n    options = options || {}\n\n    var preposition = extractPreposition(token) || ''\n    var key = lowercaseFirstLetter(token.substring(preposition.length))\n    var scheme = distanceInWordsLocale[key]\n\n    if (!options.addSuffix) {\n      return prefixPreposition(preposition) + suffixPreposition(preposition) + declension(scheme, count, 'regular')\n    }\n\n    if (options.comparison > 0) {\n      return prefixPreposition(preposition) + 'za ' + suffixPreposition(preposition) + declension(scheme, count, 'future')\n    } else {\n      return prefixPreposition(preposition) + 'pred ' + suffixPreposition(preposition) + declension(scheme, count, 'past')\n    }\n  }\n\n  return {\n    localize: localize\n  }\n}\n\nmodule.exports = buildDistanceInWordsLocale\n\n\n/***/ }),\n\n/***/ 407:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar buildFormattingTokensRegExp = __webpack_require__(196)\n\nfunction buildFormatLocale () {\n  var months3char = ['jan', 'feb', 'mar', 'apr', 'máj', 'jún', 'júl', 'aug', 'sep', 'okt', 'nov', 'dec']\n  var monthsFull = ['január', 'február', 'marec', 'apríl', 'máj', 'jún', 'júl', 'august', 'september', 'október', 'november', 'december']\n  var weekdays2char = ['ne', 'po', 'ut', 'st', 'št', 'pi', 'so']\n  var weekdays3char = ['neď', 'pon', 'uto', 'str', 'štv', 'pia', 'sob']\n  var weekdaysFull = ['nedeľa', 'pondelok', 'utorok', 'streda', 'štvrtok', 'piatok', 'sobota']\n  var meridiemUppercase = ['AM', 'PM']\n  var meridiemLowercase = ['am', 'pm']\n  var meridiemFull = ['a.m.', 'p.m.']\n\n  var formatters = {\n    // Month: jan, feb, ..., dec\n    'MMM': function (date) {\n      return months3char[date.getMonth()]\n    },\n\n    // Month: január, február, ..., december\n    'MMMM': function (date) {\n      return monthsFull[date.getMonth()]\n    },\n\n    // Day of week: ne, po, ..., so\n    'dd': function (date) {\n      return weekdays2char[date.getDay()]\n    },\n\n    // Day of week: neď, pon, ..., sob\n    'ddd': function (date) {\n      return weekdays3char[date.getDay()]\n    },\n\n    // Day of week: neďeľa, pondelok, ..., sobota\n    'dddd': function (date) {\n      return weekdaysFull[date.getDay()]\n    },\n\n    // AM, PM\n    'A': function (date) {\n      return (date.getHours() / 12) >= 1 ? meridiemUppercase[1] : meridiemUppercase[0]\n    },\n\n    // am, pm\n    'a': function (date) {\n      return (date.getHours() / 12) >= 1 ? meridiemLowercase[1] : meridiemLowercase[0]\n    },\n\n    // a.m., p.m.\n    'aa': function (date) {\n      return (date.getHours() / 12) >= 1 ? meridiemFull[1] : meridiemFull[0]\n    }\n  }\n\n  // Generate ordinal version of formatters: M -> Mo, D -> Do, etc.\n  var ordinalFormatters = ['M', 'D', 'DDD', 'd', 'Q', 'W']\n  ordinalFormatters.forEach(function (formatterToken) {\n    formatters[formatterToken + 'o'] = function (date, formatters) {\n      return ordinal(formatters[formatterToken](date))\n    }\n  })\n\n  return {\n    formatters: formatters,\n    formattingTokensRegExp: buildFormattingTokensRegExp(formatters)\n  }\n}\n\nfunction ordinal (number) {\n  return number + '.'\n}\n\nmodule.exports = buildFormatLocale\n\n\n/***/ }),\n\n/***/ 446:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar buildDistanceInWordsLocale = __webpack_require__(406)\nvar buildFormatLocale = __webpack_require__(407)\n\n/**\n * @category Locales\n * @summary Slovak locale.\n * @author Marek Suscak [@mareksuscak]{@link https://github.com/mareksuscak}\n */\nmodule.exports = {\n  distanceInWords: buildDistanceInWordsLocale(),\n  format: buildFormatLocale()\n}\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/6.5030ee8a.chunk.js","function declensionGroup (scheme, count) {\n  if (count === 1) {\n    return scheme.one\n  }\n\n  if (count >= 2 && count <= 4) {\n    return scheme.twoFour\n  }\n\n  // if count === null || count === 0 || count >= 5\n  return scheme.other\n}\n\nfunction declension (scheme, count, time) {\n  var group = declensionGroup(scheme, count)\n  var finalText = group[time] || group\n  return finalText.replace('{{count}}', count)\n}\n\nfunction extractPreposition (token) {\n  var result = ['lessThan', 'about', 'over', 'almost'].filter(function (preposition) {\n    return !!token.match(new RegExp('^' + preposition))\n  })\n\n  return result[0]\n}\n\nfunction prefixPreposition (preposition) {\n  var translation = ''\n\n  if (preposition === 'almost') {\n    translation = 'takmer'\n  }\n\n  if (preposition === 'about') {\n    translation = 'približne'\n  }\n\n  return translation.length > 0 ? translation + ' ' : ''\n}\n\nfunction suffixPreposition (preposition) {\n  var translation = ''\n\n  if (preposition === 'lessThan') {\n    translation = 'menej než'\n  }\n\n  if (preposition === 'over') {\n    translation = 'viac než'\n  }\n\n  return translation.length > 0 ? translation + ' ' : ''\n}\n\nfunction lowercaseFirstLetter (string) {\n  return string.charAt(0).toLowerCase() + string.slice(1)\n}\n\nfunction buildDistanceInWordsLocale () {\n  var distanceInWordsLocale = {\n    xSeconds: {\n      one: {\n        regular: 'sekunda',\n        past: 'sekundou',\n        future: 'sekundu'\n      },\n      twoFour: {\n        regular: '{{count}} sekundy',\n        past: '{{count}} sekundami',\n        future: '{{count}} sekundy'\n      },\n      other: {\n        regular: '{{count}} sekúnd',\n        past: '{{count}} sekundami',\n        future: '{{count}} sekúnd'\n      }\n    },\n\n    halfAMinute: {\n      other: {\n        regular: 'pol minúty',\n        past: 'pol minútou',\n        future: 'pol minúty'\n      }\n    },\n\n    xMinutes: {\n      one: {\n        regular: 'minúta',\n        past: 'minútou',\n        future: 'minútu'\n      },\n      twoFour: {\n        regular: '{{count}} minúty',\n        past: '{{count}} minútami',\n        future: '{{count}} minúty'\n      },\n      other: {\n        regular: '{{count}} minút',\n        past: '{{count}} minútami',\n        future: '{{count}} minút'\n      }\n    },\n\n    xHours: {\n      one: {\n        regular: 'hodina',\n        past: 'hodinou',\n        future: 'hodinu'\n      },\n      twoFour: {\n        regular: '{{count}} hodiny',\n        past: '{{count}} hodinami',\n        future: '{{count}} hodiny'\n      },\n      other: {\n        regular: '{{count}} hodín',\n        past: '{{count}} hodinami',\n        future: '{{count}} hodín'\n      }\n    },\n\n    xDays: {\n      one: {\n        regular: 'deň',\n        past: 'dňom',\n        future: 'deň'\n      },\n      twoFour: {\n        regular: '{{count}} dni',\n        past: '{{count}} dňami',\n        future: '{{count}} dni'\n      },\n      other: {\n        regular: '{{count}} dní',\n        past: '{{count}} dňami',\n        future: '{{count}} dní'\n      }\n    },\n\n    xMonths: {\n      one: {\n        regular: 'mesiac',\n        past: 'mesiacom',\n        future: 'mesiac'\n      },\n      twoFour: {\n        regular: '{{count}} mesiace',\n        past: '{{count}} mesiacmi',\n        future: '{{count}} mesiace'\n      },\n      other: {\n        regular: '{{count}} mesiacov',\n        past: '{{count}} mesiacmi',\n        future: '{{count}} mesiacov'\n      }\n    },\n\n    xYears: {\n      one: {\n        regular: 'rok',\n        past: 'rokom',\n        future: 'rok'\n      },\n      twoFour: {\n        regular: '{{count}} roky',\n        past: '{{count}} rokmi',\n        future: '{{count}} roky'\n      },\n      other: {\n        regular: '{{count}} rokov',\n        past: '{{count}} rokmi',\n        future: '{{count}} rokov'\n      }\n    }\n  }\n\n  function localize (token, count, options) {\n    options = options || {}\n\n    var preposition = extractPreposition(token) || ''\n    var key = lowercaseFirstLetter(token.substring(preposition.length))\n    var scheme = distanceInWordsLocale[key]\n\n    if (!options.addSuffix) {\n      return prefixPreposition(preposition) + suffixPreposition(preposition) + declension(scheme, count, 'regular')\n    }\n\n    if (options.comparison > 0) {\n      return prefixPreposition(preposition) + 'za ' + suffixPreposition(preposition) + declension(scheme, count, 'future')\n    } else {\n      return prefixPreposition(preposition) + 'pred ' + suffixPreposition(preposition) + declension(scheme, count, 'past')\n    }\n  }\n\n  return {\n    localize: localize\n  }\n}\n\nmodule.exports = buildDistanceInWordsLocale\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/date-fns/locale/sk/build_distance_in_words_locale/index.js\n// module id = 406\n// module chunks = 6 46","var buildFormattingTokensRegExp = require('../../_lib/build_formatting_tokens_reg_exp/index.js')\n\nfunction buildFormatLocale () {\n  var months3char = ['jan', 'feb', 'mar', 'apr', 'máj', 'jún', 'júl', 'aug', 'sep', 'okt', 'nov', 'dec']\n  var monthsFull = ['január', 'február', 'marec', 'apríl', 'máj', 'jún', 'júl', 'august', 'september', 'október', 'november', 'december']\n  var weekdays2char = ['ne', 'po', 'ut', 'st', 'št', 'pi', 'so']\n  var weekdays3char = ['neď', 'pon', 'uto', 'str', 'štv', 'pia', 'sob']\n  var weekdaysFull = ['nedeľa', 'pondelok', 'utorok', 'streda', 'štvrtok', 'piatok', 'sobota']\n  var meridiemUppercase = ['AM', 'PM']\n  var meridiemLowercase = ['am', 'pm']\n  var meridiemFull = ['a.m.', 'p.m.']\n\n  var formatters = {\n    // Month: jan, feb, ..., dec\n    'MMM': function (date) {\n      return months3char[date.getMonth()]\n    },\n\n    // Month: január, február, ..., december\n    'MMMM': function (date) {\n      return monthsFull[date.getMonth()]\n    },\n\n    // Day of week: ne, po, ..., so\n    'dd': function (date) {\n      return weekdays2char[date.getDay()]\n    },\n\n    // Day of week: neď, pon, ..., sob\n    'ddd': function (date) {\n      return weekdays3char[date.getDay()]\n    },\n\n    // Day of week: neďeľa, pondelok, ..., sobota\n    'dddd': function (date) {\n      return weekdaysFull[date.getDay()]\n    },\n\n    // AM, PM\n    'A': function (date) {\n      return (date.getHours() / 12) >= 1 ? meridiemUppercase[1] : meridiemUppercase[0]\n    },\n\n    // am, pm\n    'a': function (date) {\n      return (date.getHours() / 12) >= 1 ? meridiemLowercase[1] : meridiemLowercase[0]\n    },\n\n    // a.m., p.m.\n    'aa': function (date) {\n      return (date.getHours() / 12) >= 1 ? meridiemFull[1] : meridiemFull[0]\n    }\n  }\n\n  // Generate ordinal version of formatters: M -> Mo, D -> Do, etc.\n  var ordinalFormatters = ['M', 'D', 'DDD', 'd', 'Q', 'W']\n  ordinalFormatters.forEach(function (formatterToken) {\n    formatters[formatterToken + 'o'] = function (date, formatters) {\n      return ordinal(formatters[formatterToken](date))\n    }\n  })\n\n  return {\n    formatters: formatters,\n    formattingTokensRegExp: buildFormattingTokensRegExp(formatters)\n  }\n}\n\nfunction ordinal (number) {\n  return number + '.'\n}\n\nmodule.exports = buildFormatLocale\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/date-fns/locale/sk/build_format_locale/index.js\n// module id = 407\n// module chunks = 6 45","var buildDistanceInWordsLocale = require('./build_distance_in_words_locale/index.js')\nvar buildFormatLocale = require('./build_format_locale/index.js')\n\n/**\n * @category Locales\n * @summary Slovak locale.\n * @author Marek Suscak [@mareksuscak]{@link https://github.com/mareksuscak}\n */\nmodule.exports = {\n  distanceInWords: buildDistanceInWordsLocale(),\n  format: buildFormatLocale()\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/date-fns/locale/sk/index.js\n// module id = 446\n// module chunks = 6"],"sourceRoot":""}
{"version":3,"sources":["../static/js/7.cdc146b9.chunk.js","../node_modules/date-fns/locale/ru/build_distance_in_words_locale/index.js","../node_modules/date-fns/locale/ru/build_format_locale/index.js","../node_modules/date-fns/locale/ru/index.js"],"names":["webpackJsonp","553","module","exports","declension","scheme","count","undefined","one","rem10","rem100","singularNominative","replace","singularGenitive","pluralGenitive","buildLocalizeTokenFn","options","addSuffix","comparison","future","regular","past","buildDistanceInWordsLocale","localize","token","distanceInWordsLocale","lessThanXSeconds","xSeconds","halfAMinute","_","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","554","__webpack_require__","buildFormatLocale","monthsShort","monthsFull","monthsGenitive","weekdays2char","weekdays3char","weekdaysFull","meridiem","formatters","MMM","date","getMonth","MMMM","dd","getDay","ddd","dddd","A","hours","getHours","Do","D","Wo","W","a","aa","forEach","formatterToken","commonFormatters","formattingTokensRegExp","buildFormattingTokensRegExp","594","distanceInWords","format"],"mappings":"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","file":"static/js/7.cdc146b9.chunk.js","sourcesContent":["webpackJsonp([7,47,48],{\n\n/***/ 553:\n/***/ (function(module, exports) {\n\nfunction declension (scheme, count) {\n  // scheme for count=1 exists\n  if (scheme.one !== undefined && count === 1) {\n    return scheme.one\n  }\n\n  var rem10 = count % 10\n  var rem100 = count % 100\n\n  // 1, 21, 31, ...\n  if (rem10 === 1 && rem100 !== 11) {\n    return scheme.singularNominative.replace('{{count}}', count)\n\n  // 2, 3, 4, 22, 23, 24, 32 ...\n  } else if ((rem10 >= 2 && rem10 <= 4) && (rem100 < 10 || rem100 > 20)) {\n    return scheme.singularGenitive.replace('{{count}}', count)\n\n  // 5, 6, 7, 8, 9, 10, 11, ...\n  } else {\n    return scheme.pluralGenitive.replace('{{count}}', count)\n  }\n}\n\nfunction buildLocalizeTokenFn (scheme) {\n  return function (count, options) {\n    if (options.addSuffix) {\n      if (options.comparison > 0) {\n        if (scheme.future) {\n          return declension(scheme.future, count)\n        } else {\n          return 'через ' + declension(scheme.regular, count)\n        }\n      } else {\n        if (scheme.past) {\n          return declension(scheme.past, count)\n        } else {\n          return declension(scheme.regular, count) + ' назад'\n        }\n      }\n    } else {\n      return declension(scheme.regular, count)\n    }\n  }\n}\n\nfunction buildDistanceInWordsLocale () {\n  var distanceInWordsLocale = {\n    lessThanXSeconds: buildLocalizeTokenFn({\n      regular: {\n        one: 'меньше секунды',\n        singularNominative: 'меньше {{count}} секунды',\n        singularGenitive: 'меньше {{count}} секунд',\n        pluralGenitive: 'меньше {{count}} секунд'\n      },\n      future: {\n        one: 'меньше, чем через секунду',\n        singularNominative: 'меньше, чем через {{count}} секунду',\n        singularGenitive: 'меньше, чем через {{count}} секунды',\n        pluralGenitive: 'меньше, чем через {{count}} секунд'\n      }\n    }),\n\n    xSeconds: buildLocalizeTokenFn({\n      regular: {\n        singularNominative: '{{count}} секунда',\n        singularGenitive: '{{count}} секунды',\n        pluralGenitive: '{{count}} секунд'\n      },\n      past: {\n        singularNominative: '{{count}} секунду назад',\n        singularGenitive: '{{count}} секунды назад',\n        pluralGenitive: '{{count}} секунд назад'\n      },\n      future: {\n        singularNominative: 'через {{count}} секунду',\n        singularGenitive: 'через {{count}} секунды',\n        pluralGenitive: 'через {{count}} секунд'\n      }\n    }),\n\n    halfAMinute: function (_, options) {\n      if (options.addSuffix) {\n        if (options.comparison > 0) {\n          return 'через полминуты'\n        } else {\n          return 'полминуты назад'\n        }\n      }\n\n      return 'полминуты'\n    },\n\n    lessThanXMinutes: buildLocalizeTokenFn({\n      regular: {\n        one: 'меньше минуты',\n        singularNominative: 'меньше {{count}} минуты',\n        singularGenitive: 'меньше {{count}} минут',\n        pluralGenitive: 'меньше {{count}} минут'\n      },\n      future: {\n        one: 'меньше, чем через минуту',\n        singularNominative: 'меньше, чем через {{count}} минуту',\n        singularGenitive: 'меньше, чем через {{count}} минуты',\n        pluralGenitive: 'меньше, чем через {{count}} минут'\n      }\n    }),\n\n    xMinutes: buildLocalizeTokenFn({\n      regular: {\n        singularNominative: '{{count}} минута',\n        singularGenitive: '{{count}} минуты',\n        pluralGenitive: '{{count}} минут'\n      },\n      past: {\n        singularNominative: '{{count}} минуту назад',\n        singularGenitive: '{{count}} минуты назад',\n        pluralGenitive: '{{count}} минут назад'\n      },\n      future: {\n        singularNominative: 'через {{count}} минуту',\n        singularGenitive: 'через {{count}} минуты',\n        pluralGenitive: 'через {{count}} минут'\n      }\n    }),\n\n    aboutXHours: buildLocalizeTokenFn({\n      regular: {\n        singularNominative: 'около {{count}} часа',\n        singularGenitive: 'около {{count}} часов',\n        pluralGenitive: 'около {{count}} часов'\n      },\n      future: {\n        singularNominative: 'приблизительно через {{count}} час',\n        singularGenitive: 'приблизительно через {{count}} часа',\n        pluralGenitive: 'приблизительно через {{count}} часов'\n      }\n    }),\n\n    xHours: buildLocalizeTokenFn({\n      regular: {\n        singularNominative: '{{count}} час',\n        singularGenitive: '{{count}} часа',\n        pluralGenitive: '{{count}} часов'\n      }\n    }),\n\n    xDays: buildLocalizeTokenFn({\n      regular: {\n        singularNominative: '{{count}} день',\n        singularGenitive: '{{count}} дня',\n        pluralGenitive: '{{count}} дней'\n      }\n    }),\n\n    aboutXMonths: buildLocalizeTokenFn({\n      regular: {\n        singularNominative: 'около {{count}} месяца',\n        singularGenitive: 'около {{count}} месяцев',\n        pluralGenitive: 'около {{count}} месяцев'\n      },\n      future: {\n        singularNominative: 'приблизительно через {{count}} месяц',\n        singularGenitive: 'приблизительно через {{count}} месяца',\n        pluralGenitive: 'приблизительно через {{count}} месяцев'\n      }\n    }),\n\n    xMonths: buildLocalizeTokenFn({\n      regular: {\n        singularNominative: '{{count}} месяц',\n        singularGenitive: '{{count}} месяца',\n        pluralGenitive: '{{count}} месяцев'\n      }\n    }),\n\n    aboutXYears: buildLocalizeTokenFn({\n      regular: {\n        singularNominative: 'около {{count}} года',\n        singularGenitive: 'около {{count}} лет',\n        pluralGenitive: 'около {{count}} лет'\n      },\n      future: {\n        singularNominative: 'приблизительно через {{count}} год',\n        singularGenitive: 'приблизительно через {{count}} года',\n        pluralGenitive: 'приблизительно через {{count}} лет'\n      }\n    }),\n\n    xYears: buildLocalizeTokenFn({\n      regular: {\n        singularNominative: '{{count}} год',\n        singularGenitive: '{{count}} года',\n        pluralGenitive: '{{count}} лет'\n      }\n    }),\n\n    overXYears: buildLocalizeTokenFn({\n      regular: {\n        singularNominative: 'больше {{count}} года',\n        singularGenitive: 'больше {{count}} лет',\n        pluralGenitive: 'больше {{count}} лет'\n      },\n      future: {\n        singularNominative: 'больше, чем через {{count}} год',\n        singularGenitive: 'больше, чем через {{count}} года',\n        pluralGenitive: 'больше, чем через {{count}} лет'\n      }\n    }),\n\n    almostXYears: buildLocalizeTokenFn({\n      regular: {\n        singularNominative: 'почти {{count}} год',\n        singularGenitive: 'почти {{count}} года',\n        pluralGenitive: 'почти {{count}} лет'\n      },\n      future: {\n        singularNominative: 'почти через {{count}} год',\n        singularGenitive: 'почти через {{count}} года',\n        pluralGenitive: 'почти через {{count}} лет'\n      }\n    })\n  }\n\n  function localize (token, count, options) {\n    options = options || {}\n    return distanceInWordsLocale[token](count, options)\n  }\n\n  return {\n    localize: localize\n  }\n}\n\nmodule.exports = buildDistanceInWordsLocale\n\n\n/***/ }),\n\n/***/ 554:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar buildFormattingTokensRegExp = __webpack_require__(267)\n\nfunction buildFormatLocale () {\n  // http://new.gramota.ru/spravka/buro/search-answer?s=242637\n  var monthsShort = ['янв.', 'фев.', 'март', 'апр.', 'май', 'июнь', 'июль', 'авг.', 'сент.', 'окт.', 'нояб.', 'дек.']\n  var monthsFull = ['январь', 'февраль', 'март', 'апрель', 'май', 'июнь', 'июль', 'август', 'сентябрь', 'октябрь', 'ноябрь', 'декабрь']\n  var monthsGenitive = ['января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря']\n  var weekdays2char = ['вс', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб']\n  var weekdays3char = ['вск', 'пнд', 'втр', 'срд', 'чтв', 'птн', 'суб']\n  var weekdaysFull = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота']\n  var meridiem = ['ночи', 'утра', 'дня', 'вечера']\n\n  var formatters = {\n    // Month: янв., фев., ..., дек.\n    'MMM': function (date) {\n      return monthsShort[date.getMonth()]\n    },\n\n    // Month: январь, февраль, ..., декабрь\n    'MMMM': function (date) {\n      return monthsFull[date.getMonth()]\n    },\n\n    // Day of week: вс, пн, ..., сб\n    'dd': function (date) {\n      return weekdays2char[date.getDay()]\n    },\n\n    // Day of week: вск, пнд, ..., суб\n    'ddd': function (date) {\n      return weekdays3char[date.getDay()]\n    },\n\n    // Day of week: воскресенье, понедельник, ..., суббота\n    'dddd': function (date) {\n      return weekdaysFull[date.getDay()]\n    },\n\n    // Time of day: ночи, утра, дня, вечера\n    'A': function (date) {\n      var hours = date.getHours()\n      if (hours >= 17) {\n        return meridiem[3]\n      } else if (hours >= 12) {\n        return meridiem[2]\n      } else if (hours >= 4) {\n        return meridiem[1]\n      } else {\n        return meridiem[0]\n      }\n    },\n\n    'Do': function (date, formatters) {\n      return formatters.D(date) + '-е'\n    },\n\n    'Wo': function (date, formatters) {\n      return formatters.W(date) + '-я'\n    }\n  }\n\n  formatters.a = formatters.A\n  formatters.aa = formatters.A\n\n  // Generate ordinal version of formatters: M -> Mo, DDD -> DDDo, etc.\n  var ordinalFormatters = ['M', 'DDD', 'd', 'Q']\n  ordinalFormatters.forEach(function (formatterToken) {\n    formatters[formatterToken + 'o'] = function (date, formatters) {\n      return formatters[formatterToken](date) + '-й'\n    }\n  })\n\n  // Generate formatters like 'D MMMM',\n  // where month is in the genitive case: января, февраля, ..., декабря\n  var monthsGenitiveFormatters = ['D', 'Do', 'DD']\n  monthsGenitiveFormatters.forEach(function (formatterToken) {\n    formatters[formatterToken + ' MMMM'] = function (date, commonFormatters) {\n      var formatter = formatters[formatterToken] || commonFormatters[formatterToken]\n      return formatter(date, commonFormatters) + ' ' + monthsGenitive[date.getMonth()]\n    }\n  })\n\n  return {\n    formatters: formatters,\n    formattingTokensRegExp: buildFormattingTokensRegExp(formatters)\n  }\n}\n\nmodule.exports = buildFormatLocale\n\n\n/***/ }),\n\n/***/ 594:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar buildDistanceInWordsLocale = __webpack_require__(553)\nvar buildFormatLocale = __webpack_require__(554)\n\n/**\n * @category Locales\n * @summary Russian locale.\n */\nmodule.exports = {\n  distanceInWords: buildDistanceInWordsLocale(),\n  format: buildFormatLocale()\n}\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/7.cdc146b9.chunk.js","function declension (scheme, count) {\n  // scheme for count=1 exists\n  if (scheme.one !== undefined && count === 1) {\n    return scheme.one\n  }\n\n  var rem10 = count % 10\n  var rem100 = count % 100\n\n  // 1, 21, 31, ...\n  if (rem10 === 1 && rem100 !== 11) {\n    return scheme.singularNominative.replace('{{count}}', count)\n\n  // 2, 3, 4, 22, 23, 24, 32 ...\n  } else if ((rem10 >= 2 && rem10 <= 4) && (rem100 < 10 || rem100 > 20)) {\n    return scheme.singularGenitive.replace('{{count}}', count)\n\n  // 5, 6, 7, 8, 9, 10, 11, ...\n  } else {\n    return scheme.pluralGenitive.replace('{{count}}', count)\n  }\n}\n\nfunction buildLocalizeTokenFn (scheme) {\n  return function (count, options) {\n    if (options.addSuffix) {\n      if (options.comparison > 0) {\n        if (scheme.future) {\n          return declension(scheme.future, count)\n        } else {\n          return 'через ' + declension(scheme.regular, count)\n        }\n      } else {\n        if (scheme.past) {\n          return declension(scheme.past, count)\n        } else {\n          return declension(scheme.regular, count) + ' назад'\n        }\n      }\n    } else {\n      return declension(scheme.regular, count)\n    }\n  }\n}\n\nfunction buildDistanceInWordsLocale () {\n  var distanceInWordsLocale = {\n    lessThanXSeconds: buildLocalizeTokenFn({\n      regular: {\n        one: 'меньше секунды',\n        singularNominative: 'меньше {{count}} секунды',\n        singularGenitive: 'меньше {{count}} секунд',\n        pluralGenitive: 'меньше {{count}} секунд'\n      },\n      future: {\n        one: 'меньше, чем через секунду',\n        singularNominative: 'меньше, чем через {{count}} секунду',\n        singularGenitive: 'меньше, чем через {{count}} секунды',\n        pluralGenitive: 'меньше, чем через {{count}} секунд'\n      }\n    }),\n\n    xSeconds: buildLocalizeTokenFn({\n      regular: {\n        singularNominative: '{{count}} секунда',\n        singularGenitive: '{{count}} секунды',\n        pluralGenitive: '{{count}} секунд'\n      },\n      past: {\n        singularNominative: '{{count}} секунду назад',\n        singularGenitive: '{{count}} секунды назад',\n        pluralGenitive: '{{count}} секунд назад'\n      },\n      future: {\n        singularNominative: 'через {{count}} секунду',\n        singularGenitive: 'через {{count}} секунды',\n        pluralGenitive: 'через {{count}} секунд'\n      }\n    }),\n\n    halfAMinute: function (_, options) {\n      if (options.addSuffix) {\n        if (options.comparison > 0) {\n          return 'через полминуты'\n        } else {\n          return 'полминуты назад'\n        }\n      }\n\n      return 'полминуты'\n    },\n\n    lessThanXMinutes: buildLocalizeTokenFn({\n      regular: {\n        one: 'меньше минуты',\n        singularNominative: 'меньше {{count}} минуты',\n        singularGenitive: 'меньше {{count}} минут',\n        pluralGenitive: 'меньше {{count}} минут'\n      },\n      future: {\n        one: 'меньше, чем через минуту',\n        singularNominative: 'меньше, чем через {{count}} минуту',\n        singularGenitive: 'меньше, чем через {{count}} минуты',\n        pluralGenitive: 'меньше, чем через {{count}} минут'\n      }\n    }),\n\n    xMinutes: buildLocalizeTokenFn({\n      regular: {\n        singularNominative: '{{count}} минута',\n        singularGenitive: '{{count}} минуты',\n        pluralGenitive: '{{count}} минут'\n      },\n      past: {\n        singularNominative: '{{count}} минуту назад',\n        singularGenitive: '{{count}} минуты назад',\n        pluralGenitive: '{{count}} минут назад'\n      },\n      future: {\n        singularNominative: 'через {{count}} минуту',\n        singularGenitive: 'через {{count}} минуты',\n        pluralGenitive: 'через {{count}} минут'\n      }\n    }),\n\n    aboutXHours: buildLocalizeTokenFn({\n      regular: {\n        singularNominative: 'около {{count}} часа',\n        singularGenitive: 'около {{count}} часов',\n        pluralGenitive: 'около {{count}} часов'\n      },\n      future: {\n        singularNominative: 'приблизительно через {{count}} час',\n        singularGenitive: 'приблизительно через {{count}} часа',\n        pluralGenitive: 'приблизительно через {{count}} часов'\n      }\n    }),\n\n    xHours: buildLocalizeTokenFn({\n      regular: {\n        singularNominative: '{{count}} час',\n        singularGenitive: '{{count}} часа',\n        pluralGenitive: '{{count}} часов'\n      }\n    }),\n\n    xDays: buildLocalizeTokenFn({\n      regular: {\n        singularNominative: '{{count}} день',\n        singularGenitive: '{{count}} дня',\n        pluralGenitive: '{{count}} дней'\n      }\n    }),\n\n    aboutXMonths: buildLocalizeTokenFn({\n      regular: {\n        singularNominative: 'около {{count}} месяца',\n        singularGenitive: 'около {{count}} месяцев',\n        pluralGenitive: 'около {{count}} месяцев'\n      },\n      future: {\n        singularNominative: 'приблизительно через {{count}} месяц',\n        singularGenitive: 'приблизительно через {{count}} месяца',\n        pluralGenitive: 'приблизительно через {{count}} месяцев'\n      }\n    }),\n\n    xMonths: buildLocalizeTokenFn({\n      regular: {\n        singularNominative: '{{count}} месяц',\n        singularGenitive: '{{count}} месяца',\n        pluralGenitive: '{{count}} месяцев'\n      }\n    }),\n\n    aboutXYears: buildLocalizeTokenFn({\n      regular: {\n        singularNominative: 'около {{count}} года',\n        singularGenitive: 'около {{count}} лет',\n        pluralGenitive: 'около {{count}} лет'\n      },\n      future: {\n        singularNominative: 'приблизительно через {{count}} год',\n        singularGenitive: 'приблизительно через {{count}} года',\n        pluralGenitive: 'приблизительно через {{count}} лет'\n      }\n    }),\n\n    xYears: buildLocalizeTokenFn({\n      regular: {\n        singularNominative: '{{count}} год',\n        singularGenitive: '{{count}} года',\n        pluralGenitive: '{{count}} лет'\n      }\n    }),\n\n    overXYears: buildLocalizeTokenFn({\n      regular: {\n        singularNominative: 'больше {{count}} года',\n        singularGenitive: 'больше {{count}} лет',\n        pluralGenitive: 'больше {{count}} лет'\n      },\n      future: {\n        singularNominative: 'больше, чем через {{count}} год',\n        singularGenitive: 'больше, чем через {{count}} года',\n        pluralGenitive: 'больше, чем через {{count}} лет'\n      }\n    }),\n\n    almostXYears: buildLocalizeTokenFn({\n      regular: {\n        singularNominative: 'почти {{count}} год',\n        singularGenitive: 'почти {{count}} года',\n        pluralGenitive: 'почти {{count}} лет'\n      },\n      future: {\n        singularNominative: 'почти через {{count}} год',\n        singularGenitive: 'почти через {{count}} года',\n        pluralGenitive: 'почти через {{count}} лет'\n      }\n    })\n  }\n\n  function localize (token, count, options) {\n    options = options || {}\n    return distanceInWordsLocale[token](count, options)\n  }\n\n  return {\n    localize: localize\n  }\n}\n\nmodule.exports = buildDistanceInWordsLocale\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/date-fns/locale/ru/build_distance_in_words_locale/index.js\n// module id = 553\n// module chunks = 7 48","var buildFormattingTokensRegExp = require('../../_lib/build_formatting_tokens_reg_exp/index.js')\n\nfunction buildFormatLocale () {\n  // http://new.gramota.ru/spravka/buro/search-answer?s=242637\n  var monthsShort = ['янв.', 'фев.', 'март', 'апр.', 'май', 'июнь', 'июль', 'авг.', 'сент.', 'окт.', 'нояб.', 'дек.']\n  var monthsFull = ['январь', 'февраль', 'март', 'апрель', 'май', 'июнь', 'июль', 'август', 'сентябрь', 'октябрь', 'ноябрь', 'декабрь']\n  var monthsGenitive = ['января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря']\n  var weekdays2char = ['вс', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб']\n  var weekdays3char = ['вск', 'пнд', 'втр', 'срд', 'чтв', 'птн', 'суб']\n  var weekdaysFull = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота']\n  var meridiem = ['ночи', 'утра', 'дня', 'вечера']\n\n  var formatters = {\n    // Month: янв., фев., ..., дек.\n    'MMM': function (date) {\n      return monthsShort[date.getMonth()]\n    },\n\n    // Month: январь, февраль, ..., декабрь\n    'MMMM': function (date) {\n      return monthsFull[date.getMonth()]\n    },\n\n    // Day of week: вс, пн, ..., сб\n    'dd': function (date) {\n      return weekdays2char[date.getDay()]\n    },\n\n    // Day of week: вск, пнд, ..., суб\n    'ddd': function (date) {\n      return weekdays3char[date.getDay()]\n    },\n\n    // Day of week: воскресенье, понедельник, ..., суббота\n    'dddd': function (date) {\n      return weekdaysFull[date.getDay()]\n    },\n\n    // Time of day: ночи, утра, дня, вечера\n    'A': function (date) {\n      var hours = date.getHours()\n      if (hours >= 17) {\n        return meridiem[3]\n      } else if (hours >= 12) {\n        return meridiem[2]\n      } else if (hours >= 4) {\n        return meridiem[1]\n      } else {\n        return meridiem[0]\n      }\n    },\n\n    'Do': function (date, formatters) {\n      return formatters.D(date) + '-е'\n    },\n\n    'Wo': function (date, formatters) {\n      return formatters.W(date) + '-я'\n    }\n  }\n\n  formatters.a = formatters.A\n  formatters.aa = formatters.A\n\n  // Generate ordinal version of formatters: M -> Mo, DDD -> DDDo, etc.\n  var ordinalFormatters = ['M', 'DDD', 'd', 'Q']\n  ordinalFormatters.forEach(function (formatterToken) {\n    formatters[formatterToken + 'o'] = function (date, formatters) {\n      return formatters[formatterToken](date) + '-й'\n    }\n  })\n\n  // Generate formatters like 'D MMMM',\n  // where month is in the genitive case: января, февраля, ..., декабря\n  var monthsGenitiveFormatters = ['D', 'Do', 'DD']\n  monthsGenitiveFormatters.forEach(function (formatterToken) {\n    formatters[formatterToken + ' MMMM'] = function (date, commonFormatters) {\n      var formatter = formatters[formatterToken] || commonFormatters[formatterToken]\n      return formatter(date, commonFormatters) + ' ' + monthsGenitive[date.getMonth()]\n    }\n  })\n\n  return {\n    formatters: formatters,\n    formattingTokensRegExp: buildFormattingTokensRegExp(formatters)\n  }\n}\n\nmodule.exports = buildFormatLocale\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/date-fns/locale/ru/build_format_locale/index.js\n// module id = 554\n// module chunks = 7 47","var buildDistanceInWordsLocale = require('./build_distance_in_words_locale/index.js')\nvar buildFormatLocale = require('./build_format_locale/index.js')\n\n/**\n * @category Locales\n * @summary Russian locale.\n */\nmodule.exports = {\n  distanceInWords: buildDistanceInWordsLocale(),\n  format: buildFormatLocale()\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/date-fns/locale/ru/index.js\n// module id = 594\n// module chunks = 7"],"sourceRoot":""}
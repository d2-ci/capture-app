{"version":3,"file":"index-D8tuxch4.js","sources":["../../../../node_modules/date-fns/locale/bg/build_distance_in_words_locale/index.js","../../../../node_modules/date-fns/locale/bg/build_format_locale/index.js","../../../../node_modules/date-fns/locale/bg/index.js"],"sourcesContent":["function buildDistanceInWordsLocale () {\n  var distanceInWordsLocale = {\n    lessThanXSeconds: {\n      one: 'по-малко от секунда',\n      other: 'по-малко от {{count}} секунди'\n    },\n\n    xSeconds: {\n      one: '1 секунда',\n      other: '{{count}} секунди'\n    },\n\n    halfAMinute: 'половин минута',\n\n    lessThanXMinutes: {\n      one: 'по-малко от минута',\n      other: 'по-малко от {{count}} минути'\n    },\n\n    xMinutes: {\n      one: '1 минута',\n      other: '{{count}} минути'\n    },\n\n    aboutXHours: {\n      one: 'около час',\n      other: 'около {{count}} часа'\n    },\n\n    xHours: {\n      one: '1 час',\n      other: '{{count}} часа'\n    },\n\n    xDays: {\n      one: '1 ден',\n      other: '{{count}} дни'\n    },\n\n    aboutXMonths: {\n      one: 'около месец',\n      other: 'около {{count}} месеца'\n    },\n\n    xMonths: {\n      one: '1 месец',\n      other: '{{count}} месеца'\n    },\n\n    aboutXYears: {\n      one: 'около година',\n      other: 'около {{count}} години'\n    },\n\n    xYears: {\n      one: '1 година',\n      other: '{{count}} години'\n    },\n\n    overXYears: {\n      one: 'над година',\n      other: 'над {{count}} години'\n    },\n\n    almostXYears: {\n      one: 'почти година',\n      other: 'почти {{count}} години'\n    }\n  }\n\n  function localize (token, count, options) {\n    options = options || {}\n\n    var result\n    if (typeof distanceInWordsLocale[token] === 'string') {\n      result = distanceInWordsLocale[token]\n    } else if (count === 1) {\n      result = distanceInWordsLocale[token].one\n    } else {\n      result = distanceInWordsLocale[token].other.replace('{{count}}', count)\n    }\n\n    if (options.addSuffix) {\n      if (options.comparison > 0) {\n        return 'след ' + result\n      } else {\n        return 'преди ' + result\n      }\n    }\n\n    return result\n  }\n\n  return {\n    localize: localize\n  }\n}\n\nmodule.exports = buildDistanceInWordsLocale\n","var buildFormattingTokensRegExp = require('../../_lib/build_formatting_tokens_reg_exp/index.js')\n\nfunction buildFormatLocale () {\n  var months3char = ['яну', 'фев', 'мар', 'апр', 'май', 'юни', 'юли', 'авг', 'сеп', 'окт', 'ное', 'дек']\n  var monthsFull = ['януари', 'февруари', 'март', 'април', 'май', 'юни', 'юли', 'август', 'септември', 'октомври', 'ноември', 'декември']\n  var weekdays2char = ['нд', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб']\n  var weekdays3char = ['нед', 'пон', 'вто', 'сря', 'чет', 'пет', 'съб']\n  var weekdaysFull = ['неделя', 'понеделник', 'вторник', 'сряда', 'четвъртък', 'петък', 'събота']\n  var meridiem = ['сутринта', 'на обяд', 'следобед', 'вечерта']\n\n  var timeOfDay = function (date) {\n    var hours = date.getHours()\n    if (hours >= 4 && hours < 12) {\n      return meridiem[0]\n    } else if (hours >= 12 && hours < 14) {\n      return meridiem[1]\n    } else if (hours >= 14 && hours < 17) {\n      return meridiem[2]\n    } else {\n      return meridiem[3]\n    }\n  }\n\n  var formatters = {\n    // Month: Jan, Feb, ..., Dec\n    'MMM': function (date) {\n      return months3char[date.getMonth()]\n    },\n\n    // Month: January, February, ..., December\n    'MMMM': function (date) {\n      return monthsFull[date.getMonth()]\n    },\n\n    // Day of week: Su, Mo, ..., Sa\n    'dd': function (date) {\n      return weekdays2char[date.getDay()]\n    },\n\n    // Day of week: Sun, Mon, ..., Sat\n    'ddd': function (date) {\n      return weekdays3char[date.getDay()]\n    },\n\n    // Day of week: Sunday, Monday, ..., Saturday\n    'dddd': function (date) {\n      return weekdaysFull[date.getDay()]\n    },\n\n    // AM, PM\n    'A': timeOfDay,\n\n    // am, pm\n    'a': timeOfDay,\n\n    // a.m., p.m.\n    'aa': timeOfDay\n  }\n\n  // Generate ordinal version of formatters: M -> Mo, D -> Do, etc.\n  var ordinalFormatters = ['M', 'D', 'DDD', 'd', 'Q', 'W']\n  ordinalFormatters.forEach(function (formatterToken) {\n    formatters[formatterToken + 'o'] = function (date, formatters) {\n      return ordinal(formatters[formatterToken](date))\n    }\n  })\n\n  return {\n    formatters: formatters,\n    formattingTokensRegExp: buildFormattingTokensRegExp(formatters)\n  }\n}\n\nfunction ordinal (number) {\n  var rem100 = number % 100\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + '-ви'\n      case 2:\n        return number + '-ри'\n    }\n  }\n  return number + '-и'\n}\n\nmodule.exports = buildFormatLocale\n","var buildDistanceInWordsLocale = require('./build_distance_in_words_locale/index.js')\nvar buildFormatLocale = require('./build_format_locale/index.js')\n\n/**\n * @category Locales\n * @summary Bulgarian locale.\n * @author Nikolay Stoynov [@arvigeus]{@link https://github.com/arvigeus}\n */\nmodule.exports = {\n  distanceInWords: buildDistanceInWordsLocale(),\n  format: buildFormatLocale()\n}\n"],"names":["buildDistanceInWordsLocale","distanceInWordsLocale","localize","token","count","options","result","build_distance_in_words_locale","buildFormattingTokensRegExp","require$$0","buildFormatLocale","months3char","monthsFull","weekdays2char","weekdays3char","weekdaysFull","meridiem","timeOfDay","date","hours","formatters","ordinalFormatters","formatterToken","ordinal","number","rem100","build_format_locale","require$$1","bg"],"mappings":"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","x_google_ignoreList":[0,1,2]}